#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MANOFR.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MANOFR")]
	public partial class ManofrSqlDbModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationsType(ApplicationsType instance);
    partial void UpdateApplicationsType(ApplicationsType instance);
    partial void DeleteApplicationsType(ApplicationsType instance);
    partial void InsertComponentsStatus(ComponentsStatus instance);
    partial void UpdateComponentsStatus(ComponentsStatus instance);
    partial void DeleteComponentsStatus(ComponentsStatus instance);
    partial void InsertDomain(Domain instance);
    partial void UpdateDomain(Domain instance);
    partial void DeleteDomain(Domain instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectsModule(ProjectsModule instance);
    partial void UpdateProjectsModule(ProjectsModule instance);
    partial void DeleteProjectsModule(ProjectsModule instance);
    partial void InsertProjectsNFR(ProjectsNFR instance);
    partial void UpdateProjectsNFR(ProjectsNFR instance);
    partial void DeleteProjectsNFR(ProjectsNFR instance);
    partial void InsertProjectsUser(ProjectsUser instance);
    partial void UpdateProjectsUser(ProjectsUser instance);
    partial void DeleteProjectsUser(ProjectsUser instance);
    partial void InsertSprint(Sprint instance);
    partial void UpdateSprint(Sprint instance);
    partial void DeleteSprint(Sprint instance);
    partial void InsertSystemNFR(SystemNFR instance);
    partial void UpdateSystemNFR(SystemNFR instance);
    partial void DeleteSystemNFR(SystemNFR instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTasks_Assigned_User(Tasks_Assigned_User instance);
    partial void UpdateTasks_Assigned_User(Tasks_Assigned_User instance);
    partial void DeleteTasks_Assigned_User(Tasks_Assigned_User instance);
    partial void InsertUS_Positivity(US_Positivity instance);
    partial void UpdateUS_Positivity(US_Positivity instance);
    partial void DeleteUS_Positivity(US_Positivity instance);
    partial void InsertUS_Priority(US_Priority instance);
    partial void UpdateUS_Priority(US_Priority instance);
    partial void DeleteUS_Priority(US_Priority instance);
    partial void InsertUS_Relation(US_Relation instance);
    partial void UpdateUS_Relation(US_Relation instance);
    partial void DeleteUS_Relation(US_Relation instance);
    partial void InsertUS_Requirement_Type(US_Requirement_Type instance);
    partial void UpdateUS_Requirement_Type(US_Requirement_Type instance);
    partial void DeleteUS_Requirement_Type(US_Requirement_Type instance);
    partial void InsertUS_Type(US_Type instance);
    partial void UpdateUS_Type(US_Type instance);
    partial void DeleteUS_Type(US_Type instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersNFR(UsersNFR instance);
    partial void UpdateUsersNFR(UsersNFR instance);
    partial void DeleteUsersNFR(UsersNFR instance);
    partial void InsertUsersTitle(UsersTitle instance);
    partial void UpdateUsersTitle(UsersTitle instance);
    partial void DeleteUsersTitle(UsersTitle instance);
    partial void InsertUserStory(UserStory instance);
    partial void UpdateUserStory(UserStory instance);
    partial void DeleteUserStory(UserStory instance);
    partial void InsertUserStory_Assigned_User(UserStory_Assigned_User instance);
    partial void UpdateUserStory_Assigned_User(UserStory_Assigned_User instance);
    partial void DeleteUserStory_Assigned_User(UserStory_Assigned_User instance);
    partial void InsertUserStory_Related_Story(UserStory_Related_Story instance);
    partial void UpdateUserStory_Related_Story(UserStory_Related_Story instance);
    partial void DeleteUserStory_Related_Story(UserStory_Related_Story instance);
    partial void InsertNFR_Rec_AppType(NFR_Rec_AppType instance);
    partial void UpdateNFR_Rec_AppType(NFR_Rec_AppType instance);
    partial void DeleteNFR_Rec_AppType(NFR_Rec_AppType instance);
    partial void InsertNFR_Rec_Domain(NFR_Rec_Domain instance);
    partial void UpdateNFR_Rec_Domain(NFR_Rec_Domain instance);
    partial void DeleteNFR_Rec_Domain(NFR_Rec_Domain instance);
    partial void InsertEpic(Epic instance);
    partial void UpdateEpic(Epic instance);
    partial void DeleteEpic(Epic instance);
    #endregion
		
		public ManofrSqlDbModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MANOFRConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManofrSqlDbModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManofrSqlDbModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManofrSqlDbModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManofrSqlDbModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationsType> ApplicationsTypes
		{
			get
			{
				return this.GetTable<ApplicationsType>();
			}
		}
		
		public System.Data.Linq.Table<ComponentsStatus> ComponentsStatus
		{
			get
			{
				return this.GetTable<ComponentsStatus>();
			}
		}
		
		public System.Data.Linq.Table<Domain> Domains
		{
			get
			{
				return this.GetTable<Domain>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectsModule> ProjectsModules
		{
			get
			{
				return this.GetTable<ProjectsModule>();
			}
		}
		
		public System.Data.Linq.Table<ProjectsNFR> ProjectsNFRs
		{
			get
			{
				return this.GetTable<ProjectsNFR>();
			}
		}
		
		public System.Data.Linq.Table<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this.GetTable<ProjectsUser>();
			}
		}
		
		public System.Data.Linq.Table<Sprint> Sprints
		{
			get
			{
				return this.GetTable<Sprint>();
			}
		}
		
		public System.Data.Linq.Table<SystemNFR> SystemNFRs
		{
			get
			{
				return this.GetTable<SystemNFR>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Tasks_Assigned_User> Tasks_Assigned_Users
		{
			get
			{
				return this.GetTable<Tasks_Assigned_User>();
			}
		}
		
		public System.Data.Linq.Table<US_Positivity> US_Positivities
		{
			get
			{
				return this.GetTable<US_Positivity>();
			}
		}
		
		public System.Data.Linq.Table<US_Priority> US_Priorities
		{
			get
			{
				return this.GetTable<US_Priority>();
			}
		}
		
		public System.Data.Linq.Table<US_Relation> US_Relations
		{
			get
			{
				return this.GetTable<US_Relation>();
			}
		}
		
		public System.Data.Linq.Table<US_Requirement_Type> US_Requirement_Types
		{
			get
			{
				return this.GetTable<US_Requirement_Type>();
			}
		}
		
		public System.Data.Linq.Table<US_Type> US_Types
		{
			get
			{
				return this.GetTable<US_Type>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersNFR> UsersNFRs
		{
			get
			{
				return this.GetTable<UsersNFR>();
			}
		}
		
		public System.Data.Linq.Table<UsersTitle> UsersTitles
		{
			get
			{
				return this.GetTable<UsersTitle>();
			}
		}
		
		public System.Data.Linq.Table<UserStory> UserStories
		{
			get
			{
				return this.GetTable<UserStory>();
			}
		}
		
		public System.Data.Linq.Table<UserStory_Assigned_User> UserStory_Assigned_Users
		{
			get
			{
				return this.GetTable<UserStory_Assigned_User>();
			}
		}
		
		public System.Data.Linq.Table<UserStory_Related_Story> UserStory_Related_Stories
		{
			get
			{
				return this.GetTable<UserStory_Related_Story>();
			}
		}
		
		public System.Data.Linq.Table<NFR_Rec_AppType> NFR_Rec_AppTypes
		{
			get
			{
				return this.GetTable<NFR_Rec_AppType>();
			}
		}
		
		public System.Data.Linq.Table<NFR_Rec_Domain> NFR_Rec_Domains
		{
			get
			{
				return this.GetTable<NFR_Rec_Domain>();
			}
		}
		
		public System.Data.Linq.Table<Epic> Epics
		{
			get
			{
				return this.GetTable<Epic>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationsTypes")]
	public partial class ApplicationsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public ApplicationsType()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationsType_Project", Storage="_Projects", ThisKey="ID", OtherKey="SystemType")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsType = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComponentsStatus")]
	public partial class ComponentsStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Status;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Sprint> _Sprints;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public ComponentsStatus()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Sprints = new EntitySet<Sprint>(new Action<Sprint>(this.attach_Sprints), new Action<Sprint>(this.detach_Sprints));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Project", Storage="_Projects", ThisKey="ID", OtherKey="Status")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Sprint", Storage="_Sprints", ThisKey="ID", OtherKey="Status")]
		public EntitySet<Sprint> Sprints
		{
			get
			{
				return this._Sprints;
			}
			set
			{
				this._Sprints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Task", Storage="_Tasks", ThisKey="ID", OtherKey="Status")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="StatusID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = null;
		}
		
		private void attach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = this;
		}
		
		private void detach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.ComponentsStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domains")]
	public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Domain1;
		
		private EntitySet<Module> _Modules;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDomain1Changing(string value);
    partial void OnDomain1Changed();
    #endregion
		
		public Domain()
		{
			this._Modules = new EntitySet<Module>(new Action<Module>(this.attach_Modules), new Action<Module>(this.detach_Modules));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Domain", Storage="_Domain1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Domain1
		{
			get
			{
				return this._Domain1;
			}
			set
			{
				if ((this._Domain1 != value))
				{
					this.OnDomain1Changing(value);
					this.SendPropertyChanging();
					this._Domain1 = value;
					this.SendPropertyChanged("Domain1");
					this.OnDomain1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Module", Storage="_Modules", ThisKey="ID", OtherKey="Domain")]
		public EntitySet<Module> Modules
		{
			get
			{
				return this._Modules;
			}
			set
			{
				this._Modules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Project", Storage="_Projects", ThisKey="ID", OtherKey="Domain")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Domain1 = this;
		}
		
		private void detach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Domain1 = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Domain1 = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Domain1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Modules")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Module1;
		
		private int _Domain;
		
		private EntitySet<ProjectsModule> _ProjectsModules;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntitySet<Epic> _Epics;
		
		private EntityRef<Domain> _Domain1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModule1Changing(string value);
    partial void OnModule1Changed();
    partial void OnDomainChanging(int value);
    partial void OnDomainChanged();
    #endregion
		
		public Module()
		{
			this._ProjectsModules = new EntitySet<ProjectsModule>(new Action<ProjectsModule>(this.attach_ProjectsModules), new Action<ProjectsModule>(this.detach_ProjectsModules));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._Epics = new EntitySet<Epic>(new Action<Epic>(this.attach_Epics), new Action<Epic>(this.detach_Epics));
			this._Domain1 = default(EntityRef<Domain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Module", Storage="_Module1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Module1
		{
			get
			{
				return this._Module1;
			}
			set
			{
				if ((this._Module1 != value))
				{
					this.OnModule1Changing(value);
					this.SendPropertyChanging();
					this._Module1 = value;
					this.SendPropertyChanged("Module1");
					this.OnModule1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="Int NOT NULL")]
		public int Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					if (this._Domain1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_ProjectsModule", Storage="_ProjectsModules", ThisKey="ID", OtherKey="Module")]
		public EntitySet<ProjectsModule> ProjectsModules
		{
			get
			{
				return this._ProjectsModules;
			}
			set
			{
				this._ProjectsModules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="ModuleID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Epic", Storage="_Epics", ThisKey="ID", OtherKey="Module")]
		public EntitySet<Epic> Epics
		{
			get
			{
				return this._Epics;
			}
			set
			{
				this._Epics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Module", Storage="_Domain1", ThisKey="Domain", OtherKey="ID", IsForeignKey=true)]
		public Domain Domain1
		{
			get
			{
				return this._Domain1.Entity;
			}
			set
			{
				Domain previousValue = this._Domain1.Entity;
				if (((previousValue != value) 
							|| (this._Domain1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain1.Entity = null;
						previousValue.Modules.Remove(this);
					}
					this._Domain1.Entity = value;
					if ((value != null))
					{
						value.Modules.Add(this);
						this._Domain = value.ID;
					}
					else
					{
						this._Domain = default(int);
					}
					this.SendPropertyChanged("Domain1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectsModules(ProjectsModule entity)
		{
			this.SendPropertyChanging();
			entity.Module1 = this;
		}
		
		private void detach_ProjectsModules(ProjectsModule entity)
		{
			this.SendPropertyChanging();
			entity.Module1 = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_Epics(Epic entity)
		{
			this.SendPropertyChanging();
			entity.Module1 = this;
		}
		
		private void detach_Epics(Epic entity)
		{
			this.SendPropertyChanging();
			entity.Module1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Domain;
		
		private int _SystemType;
		
		private int _Status;
		
		private string _CustomerName;
		
		private string _CustomerPhone;
		
		private string _CustomerEmail;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Description;
		
		private System.DateTime _CreationDate;
		
		private int _CreatedBy;
		
		private System.Nullable<bool> _isSuspended;
		
		private EntitySet<ProjectsModule> _ProjectsModules;
		
		private EntitySet<ProjectsNFR> _ProjectsNFRs;
		
		private EntitySet<ProjectsUser> _ProjectsUsers;
		
		private EntitySet<Sprint> _Sprints;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntitySet<Epic> _Epics;
		
		private EntityRef<Domain> _Domain1;
		
		private EntityRef<ComponentsStatus> _ComponentsStatus;
		
		private EntityRef<ApplicationsType> _ApplicationsType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainChanging(int value);
    partial void OnDomainChanged();
    partial void OnSystemTypeChanging(int value);
    partial void OnSystemTypeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnCustomerEmailChanging(string value);
    partial void OnCustomerEmailChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnisSuspendedChanging(System.Nullable<bool> value);
    partial void OnisSuspendedChanged();
    #endregion
		
		public Project()
		{
			this._ProjectsModules = new EntitySet<ProjectsModule>(new Action<ProjectsModule>(this.attach_ProjectsModules), new Action<ProjectsModule>(this.detach_ProjectsModules));
			this._ProjectsNFRs = new EntitySet<ProjectsNFR>(new Action<ProjectsNFR>(this.attach_ProjectsNFRs), new Action<ProjectsNFR>(this.detach_ProjectsNFRs));
			this._ProjectsUsers = new EntitySet<ProjectsUser>(new Action<ProjectsUser>(this.attach_ProjectsUsers), new Action<ProjectsUser>(this.detach_ProjectsUsers));
			this._Sprints = new EntitySet<Sprint>(new Action<Sprint>(this.attach_Sprints), new Action<Sprint>(this.detach_Sprints));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._Epics = new EntitySet<Epic>(new Action<Epic>(this.attach_Epics), new Action<Epic>(this.detach_Epics));
			this._Domain1 = default(EntityRef<Domain>);
			this._ComponentsStatus = default(EntityRef<ComponentsStatus>);
			this._ApplicationsType = default(EntityRef<ApplicationsType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="Int NOT NULL")]
		public int Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					if (this._Domain1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemType", DbType="Int NOT NULL")]
		public int SystemType
		{
			get
			{
				return this._SystemType;
			}
			set
			{
				if ((this._SystemType != value))
				{
					if (this._ApplicationsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemType = value;
					this.SendPropertyChanged("SystemType");
					this.OnSystemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._ComponentsStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(400)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="NVarChar(400)")]
		public string CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerEmail", DbType="NVarChar(400)")]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this.OnCustomerEmailChanging(value);
					this.SendPropertyChanging();
					this._CustomerEmail = value;
					this.SendPropertyChanged("CustomerEmail");
					this.OnCustomerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSuspended", DbType="Bit")]
		public System.Nullable<bool> isSuspended
		{
			get
			{
				return this._isSuspended;
			}
			set
			{
				if ((this._isSuspended != value))
				{
					this.OnisSuspendedChanging(value);
					this.SendPropertyChanging();
					this._isSuspended = value;
					this.SendPropertyChanged("isSuspended");
					this.OnisSuspendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsModule", Storage="_ProjectsModules", ThisKey="ID", OtherKey="Project")]
		public EntitySet<ProjectsModule> ProjectsModules
		{
			get
			{
				return this._ProjectsModules;
			}
			set
			{
				this._ProjectsModules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsNFR", Storage="_ProjectsNFRs", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectsNFR> ProjectsNFRs
		{
			get
			{
				return this._ProjectsNFRs;
			}
			set
			{
				this._ProjectsNFRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsUser", Storage="_ProjectsUsers", ThisKey="ID", OtherKey="Project")]
		public EntitySet<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this._ProjectsUsers;
			}
			set
			{
				this._ProjectsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sprint", Storage="_Sprints", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Sprint> Sprints
		{
			get
			{
				return this._Sprints;
			}
			set
			{
				this._Sprints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Tasks", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Epic", Storage="_Epics", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Epic> Epics
		{
			get
			{
				return this._Epics;
			}
			set
			{
				this._Epics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Project", Storage="_Domain1", ThisKey="Domain", OtherKey="ID", IsForeignKey=true)]
		public Domain Domain1
		{
			get
			{
				return this._Domain1.Entity;
			}
			set
			{
				Domain previousValue = this._Domain1.Entity;
				if (((previousValue != value) 
							|| (this._Domain1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain1.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Domain1.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Domain = value.ID;
					}
					else
					{
						this._Domain = default(int);
					}
					this.SendPropertyChanged("Domain1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Project", Storage="_ComponentsStatus", ThisKey="Status", OtherKey="ID", IsForeignKey=true)]
		public ComponentsStatus ComponentsStatus
		{
			get
			{
				return this._ComponentsStatus.Entity;
			}
			set
			{
				ComponentsStatus previousValue = this._ComponentsStatus.Entity;
				if (((previousValue != value) 
							|| (this._ComponentsStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentsStatus.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ComponentsStatus.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Status = value.ID;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("ComponentsStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationsType_Project", Storage="_ApplicationsType", ThisKey="SystemType", OtherKey="ID", IsForeignKey=true)]
		public ApplicationsType ApplicationsType
		{
			get
			{
				return this._ApplicationsType.Entity;
			}
			set
			{
				ApplicationsType previousValue = this._ApplicationsType.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationsType.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ApplicationsType.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._SystemType = value.ID;
					}
					else
					{
						this._SystemType = default(int);
					}
					this.SendPropertyChanged("ApplicationsType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectsModules(ProjectsModule entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = this;
		}
		
		private void detach_ProjectsModules(ProjectsModule entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = null;
		}
		
		private void attach_ProjectsNFRs(ProjectsNFR entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectsNFRs(ProjectsNFR entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = this;
		}
		
		private void detach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = null;
		}
		
		private void attach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Epics(Epic entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Epics(Epic entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectsModules")]
	public partial class ProjectsModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Project;
		
		private int _Module;
		
		private EntityRef<Module> _Module1;
		
		private EntityRef<Project> _Project1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectChanging(int value);
    partial void OnProjectChanged();
    partial void OnModuleChanging(int value);
    partial void OnModuleChanged();
    #endregion
		
		public ProjectsModule()
		{
			this._Module1 = default(EntityRef<Module>);
			this._Project1 = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="Int NOT NULL")]
		public int Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					if (this._Project1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Module", DbType="Int NOT NULL")]
		public int Module
		{
			get
			{
				return this._Module;
			}
			set
			{
				if ((this._Module != value))
				{
					if (this._Module1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleChanging(value);
					this.SendPropertyChanging();
					this._Module = value;
					this.SendPropertyChanged("Module");
					this.OnModuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_ProjectsModule", Storage="_Module1", ThisKey="Module", OtherKey="ID", IsForeignKey=true)]
		public Module Module1
		{
			get
			{
				return this._Module1.Entity;
			}
			set
			{
				Module previousValue = this._Module1.Entity;
				if (((previousValue != value) 
							|| (this._Module1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module1.Entity = null;
						previousValue.ProjectsModules.Remove(this);
					}
					this._Module1.Entity = value;
					if ((value != null))
					{
						value.ProjectsModules.Add(this);
						this._Module = value.ID;
					}
					else
					{
						this._Module = default(int);
					}
					this.SendPropertyChanged("Module1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsModule", Storage="_Project1", ThisKey="Project", OtherKey="ID", IsForeignKey=true)]
		public Project Project1
		{
			get
			{
				return this._Project1.Entity;
			}
			set
			{
				Project previousValue = this._Project1.Entity;
				if (((previousValue != value) 
							|| (this._Project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project1.Entity = null;
						previousValue.ProjectsModules.Remove(this);
					}
					this._Project1.Entity = value;
					if ((value != null))
					{
						value.ProjectsModules.Add(this);
						this._Project = value.ID;
					}
					else
					{
						this._Project = default(int);
					}
					this.SendPropertyChanged("Project1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectsNFRs")]
	public partial class ProjectsNFR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _NFR;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNFRChanging(string value);
    partial void OnNFRChanged();
    #endregion
		
		public ProjectsNFR()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NFR
		{
			get
			{
				return this._NFR;
			}
			set
			{
				if ((this._NFR != value))
				{
					this.OnNFRChanging(value);
					this.SendPropertyChanging();
					this._NFR = value;
					this.SendPropertyChanged("NFR");
					this.OnNFRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectsNFR_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="NFR_NFRID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsNFR", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectsNFRs.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectsNFRs.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.ProjectsNFR = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.ProjectsNFR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectsUsers")]
	public partial class ProjectsUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Project;
		
		private int _SysUser;
		
		private EntityRef<Project> _Project1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectChanging(int value);
    partial void OnProjectChanged();
    partial void OnSysUserChanging(int value);
    partial void OnSysUserChanged();
    #endregion
		
		public ProjectsUser()
		{
			this._Project1 = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="Int NOT NULL")]
		public int Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					if (this._Project1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysUser", DbType="Int NOT NULL")]
		public int SysUser
		{
			get
			{
				return this._SysUser;
			}
			set
			{
				if ((this._SysUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSysUserChanging(value);
					this.SendPropertyChanging();
					this._SysUser = value;
					this.SendPropertyChanged("SysUser");
					this.OnSysUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsUser", Storage="_Project1", ThisKey="Project", OtherKey="ID", IsForeignKey=true)]
		public Project Project1
		{
			get
			{
				return this._Project1.Entity;
			}
			set
			{
				Project previousValue = this._Project1.Entity;
				if (((previousValue != value) 
							|| (this._Project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project1.Entity = null;
						previousValue.ProjectsUsers.Remove(this);
					}
					this._Project1.Entity = value;
					if ((value != null))
					{
						value.ProjectsUsers.Add(this);
						this._Project = value.ID;
					}
					else
					{
						this._Project = default(int);
					}
					this.SendPropertyChanged("Project1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectsUser", Storage="_User", ThisKey="SysUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProjectsUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProjectsUsers.Add(this);
						this._SysUser = value.ID;
					}
					else
					{
						this._SysUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprints")]
	public partial class Sprint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Goal;
		
		private int _Status;
		
		private System.DateTime _CreationDate;
		
		private int _CreatedBy;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ComponentsStatus> _ComponentsStatus;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnGoalChanging(string value);
    partial void OnGoalChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Sprint()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._Project = default(EntityRef<Project>);
			this._ComponentsStatus = default(EntityRef<ComponentsStatus>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goal", DbType="NVarChar(MAX)")]
		public string Goal
		{
			get
			{
				return this._Goal;
			}
			set
			{
				if ((this._Goal != value))
				{
					this.OnGoalChanging(value);
					this.SendPropertyChanging();
					this._Goal = value;
					this.SendPropertyChanged("Goal");
					this.OnGoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._ComponentsStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="SprintID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sprint", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Sprints.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Sprints.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Sprint", Storage="_ComponentsStatus", ThisKey="Status", OtherKey="ID", IsForeignKey=true)]
		public ComponentsStatus ComponentsStatus
		{
			get
			{
				return this._ComponentsStatus.Entity;
			}
			set
			{
				ComponentsStatus previousValue = this._ComponentsStatus.Entity;
				if (((previousValue != value) 
							|| (this._ComponentsStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentsStatus.Entity = null;
						previousValue.Sprints.Remove(this);
					}
					this._ComponentsStatus.Entity = value;
					if ((value != null))
					{
						value.Sprints.Add(this);
						this._Status = value.ID;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("ComponentsStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sprint", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Sprints.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Sprints.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemNFRs")]
	public partial class SystemNFR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NFR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNFRChanging(string value);
    partial void OnNFRChanged();
    #endregion
		
		public SystemNFR()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NFR
		{
			get
			{
				return this._NFR;
			}
			set
			{
				if ((this._NFR != value))
				{
					this.OnNFRChanging(value);
					this.SendPropertyChanging();
					this._NFR = value;
					this.SendPropertyChanged("NFR");
					this.OnNFRChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Priority;
		
		private System.Nullable<int> _AssignedUserStory;
		
		private System.Nullable<int> _RequirementType;
		
		private string _AttachmentUrl;
		
		private int _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private EntitySet<Tasks_Assigned_User> _Tasks_Assigned_Users;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ComponentsStatus> _ComponentsStatus;
		
		private EntityRef<US_Priority> _US_Priority;
		
		private EntityRef<US_Requirement_Type> _US_Requirement_Type;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<UserStory> _UserStory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnAssignedUserStoryChanging(System.Nullable<int> value);
    partial void OnAssignedUserStoryChanged();
    partial void OnRequirementTypeChanging(System.Nullable<int> value);
    partial void OnRequirementTypeChanged();
    partial void OnAttachmentUrlChanging(string value);
    partial void OnAttachmentUrlChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public Task()
		{
			this._Tasks_Assigned_Users = new EntitySet<Tasks_Assigned_User>(new Action<Tasks_Assigned_User>(this.attach_Tasks_Assigned_Users), new Action<Tasks_Assigned_User>(this.detach_Tasks_Assigned_Users));
			this._Project = default(EntityRef<Project>);
			this._ComponentsStatus = default(EntityRef<ComponentsStatus>);
			this._US_Priority = default(EntityRef<US_Priority>);
			this._US_Requirement_Type = default(EntityRef<US_Requirement_Type>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._UserStory = default(EntityRef<UserStory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._ComponentsStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					if (this._US_Priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedUserStory", DbType="Int")]
		public System.Nullable<int> AssignedUserStory
		{
			get
			{
				return this._AssignedUserStory;
			}
			set
			{
				if ((this._AssignedUserStory != value))
				{
					if (this._UserStory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedUserStoryChanging(value);
					this.SendPropertyChanging();
					this._AssignedUserStory = value;
					this.SendPropertyChanged("AssignedUserStory");
					this.OnAssignedUserStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequirementType", DbType="Int")]
		public System.Nullable<int> RequirementType
		{
			get
			{
				return this._RequirementType;
			}
			set
			{
				if ((this._RequirementType != value))
				{
					if (this._US_Requirement_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeChanging(value);
					this.SendPropertyChanging();
					this._RequirementType = value;
					this.SendPropertyChanged("RequirementType");
					this.OnRequirementTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentUrl", DbType="NVarChar(MAX)")]
		public string AttachmentUrl
		{
			get
			{
				return this._AttachmentUrl;
			}
			set
			{
				if ((this._AttachmentUrl != value))
				{
					this.OnAttachmentUrlChanging(value);
					this.SendPropertyChanging();
					this._AttachmentUrl = value;
					this.SendPropertyChanged("AttachmentUrl");
					this.OnAttachmentUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="Date")]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Tasks_Assigned_User", Storage="_Tasks_Assigned_Users", ThisKey="ID", OtherKey="TaskID")]
		public EntitySet<Tasks_Assigned_User> Tasks_Assigned_Users
		{
			get
			{
				return this._Tasks_Assigned_Users;
			}
			set
			{
				this._Tasks_Assigned_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_Task", Storage="_ComponentsStatus", ThisKey="Status", OtherKey="ID", IsForeignKey=true)]
		public ComponentsStatus ComponentsStatus
		{
			get
			{
				return this._ComponentsStatus.Entity;
			}
			set
			{
				ComponentsStatus previousValue = this._ComponentsStatus.Entity;
				if (((previousValue != value) 
							|| (this._ComponentsStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentsStatus.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._ComponentsStatus.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Status = value.ID;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("ComponentsStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Priority_Task", Storage="_US_Priority", ThisKey="Priority", OtherKey="ID", IsForeignKey=true)]
		public US_Priority US_Priority
		{
			get
			{
				return this._US_Priority.Entity;
			}
			set
			{
				US_Priority previousValue = this._US_Priority.Entity;
				if (((previousValue != value) 
							|| (this._US_Priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Priority.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._US_Priority.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Priority = value.ID;
					}
					else
					{
						this._Priority = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Priority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Requirement_Type_Task", Storage="_US_Requirement_Type", ThisKey="RequirementType", OtherKey="ID", IsForeignKey=true)]
		public US_Requirement_Type US_Requirement_Type
		{
			get
			{
				return this._US_Requirement_Type.Entity;
			}
			set
			{
				US_Requirement_Type previousValue = this._US_Requirement_Type.Entity;
				if (((previousValue != value) 
							|| (this._US_Requirement_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Requirement_Type.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._US_Requirement_Type.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._RequirementType = value.ID;
					}
					else
					{
						this._RequirementType = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Requirement_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task1", Storage="_User1", ThisKey="UpdatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Tasks1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Tasks1.Add(this);
						this._UpdatedBy = value.ID;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_Task", Storage="_UserStory", ThisKey="AssignedUserStory", OtherKey="ID", IsForeignKey=true)]
		public UserStory UserStory
		{
			get
			{
				return this._UserStory.Entity;
			}
			set
			{
				UserStory previousValue = this._UserStory.Entity;
				if (((previousValue != value) 
							|| (this._UserStory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStory.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._UserStory.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._AssignedUserStory = value.ID;
					}
					else
					{
						this._AssignedUserStory = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserStory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks_Assigned_Users(Tasks_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Tasks_Assigned_Users(Tasks_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks_Assigned_Users")]
	public partial class Tasks_Assigned_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TaskID;
		
		private int _AssignedUser;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnAssignedUserChanging(int value);
    partial void OnAssignedUserChanged();
    #endregion
		
		public Tasks_Assigned_User()
		{
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedUser", DbType="Int NOT NULL")]
		public int AssignedUser
		{
			get
			{
				return this._AssignedUser;
			}
			set
			{
				if ((this._AssignedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedUserChanging(value);
					this.SendPropertyChanging();
					this._AssignedUser = value;
					this.SendPropertyChanged("AssignedUser");
					this.OnAssignedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Tasks_Assigned_User", Storage="_Task", ThisKey="TaskID", OtherKey="ID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Tasks_Assigned_Users.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Tasks_Assigned_Users.Add(this);
						this._TaskID = value.ID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tasks_Assigned_User", Storage="_User", ThisKey="AssignedUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks_Assigned_Users.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks_Assigned_Users.Add(this);
						this._AssignedUser = value.ID;
					}
					else
					{
						this._AssignedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.US_Positivity")]
	public partial class US_Positivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PosNeg_Value;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPosNeg_ValueChanging(string value);
    partial void OnPosNeg_ValueChanged();
    #endregion
		
		public US_Positivity()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosNeg_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PosNeg_Value
		{
			get
			{
				return this._PosNeg_Value;
			}
			set
			{
				if ((this._PosNeg_Value != value))
				{
					this.OnPosNeg_ValueChanging(value);
					this.SendPropertyChanging();
					this._PosNeg_Value = value;
					this.SendPropertyChanged("PosNeg_Value");
					this.OnPosNeg_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Positivity_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="NFR_PosOrNeg")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Positivity = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Positivity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.US_Priorities")]
	public partial class US_Priority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Priority_Value;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPriority_ValueChanging(string value);
    partial void OnPriority_ValueChanged();
    #endregion
		
		public US_Priority()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Priority_Value
		{
			get
			{
				return this._Priority_Value;
			}
			set
			{
				if ((this._Priority_Value != value))
				{
					this.OnPriority_ValueChanging(value);
					this.SendPropertyChanging();
					this._Priority_Value = value;
					this.SendPropertyChanged("Priority_Value");
					this.OnPriority_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Priority_Task", Storage="_Tasks", ThisKey="ID", OtherKey="Priority")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Priority_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="UsPriority")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.US_Priority = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.US_Priority = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Priority = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Priority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.US_Relations")]
	public partial class US_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Relation_Value;
		
		private string _Req_Type;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRelation_ValueChanging(string value);
    partial void OnRelation_ValueChanged();
    partial void OnReq_TypeChanging(string value);
    partial void OnReq_TypeChanged();
    #endregion
		
		public US_Relation()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Relation_Value
		{
			get
			{
				return this._Relation_Value;
			}
			set
			{
				if ((this._Relation_Value != value))
				{
					this.OnRelation_ValueChanging(value);
					this.SendPropertyChanging();
					this._Relation_Value = value;
					this.SendPropertyChanged("Relation_Value");
					this.OnRelation_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Req_Type", DbType="NVarChar(100)")]
		public string Req_Type
		{
			get
			{
				return this._Req_Type;
			}
			set
			{
				if ((this._Req_Type != value))
				{
					this.OnReq_TypeChanging(value);
					this.SendPropertyChanging();
					this._Req_Type = value;
					this.SendPropertyChanged("Req_Type");
					this.OnReq_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Relation_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="RelatedTo")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Relation = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Relation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.US_Requirement_Types")]
	public partial class US_Requirement_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type_Value;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnType_ValueChanging(string value);
    partial void OnType_ValueChanged();
    #endregion
		
		public US_Requirement_Type()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Type_Value
		{
			get
			{
				return this._Type_Value;
			}
			set
			{
				if ((this._Type_Value != value))
				{
					this.OnType_ValueChanging(value);
					this.SendPropertyChanging();
					this._Type_Value = value;
					this.SendPropertyChanged("Type_Value");
					this.OnType_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Requirement_Type_Task", Storage="_Tasks", ThisKey="ID", OtherKey="RequirementType")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Requirement_Type_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="RequirementType")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.US_Requirement_Type = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.US_Requirement_Type = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Requirement_Type = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Requirement_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.US_Types")]
	public partial class US_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type_Value;
		
		private EntitySet<UserStory> _UserStories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnType_ValueChanging(string value);
    partial void OnType_ValueChanged();
    #endregion
		
		public US_Type()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Type_Value
		{
			get
			{
				return this._Type_Value;
			}
			set
			{
				if ((this._Type_Value != value))
				{
					this.OnType_ValueChanging(value);
					this.SendPropertyChanging();
					this._Type_Value = value;
					this.SendPropertyChanged("Type_Value");
					this.OnType_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Type_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="UsType")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Type = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.US_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _Password;
		
		private string _Fullname;
		
		private System.Nullable<int> _Title;
		
		private bool _FirstTimeLogin;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectsUser> _ProjectsUsers;
		
		private EntitySet<Sprint> _Sprints;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Task> _Tasks1;
		
		private EntitySet<Tasks_Assigned_User> _Tasks_Assigned_Users;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntitySet<UserStory> _UserStories1;
		
		private EntitySet<UserStory_Assigned_User> _UserStory_Assigned_Users;
		
		private EntityRef<UsersTitle> _UsersTitle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnTitleChanging(System.Nullable<int> value);
    partial void OnTitleChanged();
    partial void OnFirstTimeLoginChanging(bool value);
    partial void OnFirstTimeLoginChanged();
    #endregion
		
		public User()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectsUsers = new EntitySet<ProjectsUser>(new Action<ProjectsUser>(this.attach_ProjectsUsers), new Action<ProjectsUser>(this.detach_ProjectsUsers));
			this._Sprints = new EntitySet<Sprint>(new Action<Sprint>(this.attach_Sprints), new Action<Sprint>(this.detach_Sprints));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Tasks1 = new EntitySet<Task>(new Action<Task>(this.attach_Tasks1), new Action<Task>(this.detach_Tasks1));
			this._Tasks_Assigned_Users = new EntitySet<Tasks_Assigned_User>(new Action<Tasks_Assigned_User>(this.attach_Tasks_Assigned_Users), new Action<Tasks_Assigned_User>(this.detach_Tasks_Assigned_Users));
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._UserStories1 = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories1), new Action<UserStory>(this.detach_UserStories1));
			this._UserStory_Assigned_Users = new EntitySet<UserStory_Assigned_User>(new Action<UserStory_Assigned_User>(this.attach_UserStory_Assigned_Users), new Action<UserStory_Assigned_User>(this.detach_UserStory_Assigned_Users));
			this._UsersTitle = default(EntityRef<UsersTitle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(400)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Int")]
		public System.Nullable<int> Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					if (this._UsersTitle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstTimeLogin", DbType="Bit NOT NULL")]
		public bool FirstTimeLogin
		{
			get
			{
				return this._FirstTimeLogin;
			}
			set
			{
				if ((this._FirstTimeLogin != value))
				{
					this.OnFirstTimeLoginChanging(value);
					this.SendPropertyChanging();
					this._FirstTimeLogin = value;
					this.SendPropertyChanged("FirstTimeLogin");
					this.OnFirstTimeLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_Projects", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectsUser", Storage="_ProjectsUsers", ThisKey="ID", OtherKey="SysUser")]
		public EntitySet<ProjectsUser> ProjectsUsers
		{
			get
			{
				return this._ProjectsUsers;
			}
			set
			{
				this._ProjectsUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sprint", Storage="_Sprints", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Sprint> Sprints
		{
			get
			{
				return this._Sprints;
			}
			set
			{
				this._Sprints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_Tasks", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task1", Storage="_Tasks1", ThisKey="ID", OtherKey="UpdatedBy")]
		public EntitySet<Task> Tasks1
		{
			get
			{
				return this._Tasks1;
			}
			set
			{
				this._Tasks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tasks_Assigned_User", Storage="_Tasks_Assigned_Users", ThisKey="ID", OtherKey="AssignedUser")]
		public EntitySet<Tasks_Assigned_User> Tasks_Assigned_Users
		{
			get
			{
				return this._Tasks_Assigned_Users;
			}
			set
			{
				this._Tasks_Assigned_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory1", Storage="_UserStories1", ThisKey="ID", OtherKey="UpdatedBy")]
		public EntitySet<UserStory> UserStories1
		{
			get
			{
				return this._UserStories1;
			}
			set
			{
				this._UserStories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory_Assigned_User", Storage="_UserStory_Assigned_Users", ThisKey="ID", OtherKey="AssignedUser")]
		public EntitySet<UserStory_Assigned_User> UserStory_Assigned_Users
		{
			get
			{
				return this._UserStory_Assigned_Users;
			}
			set
			{
				this._UserStory_Assigned_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTitle_User", Storage="_UsersTitle", ThisKey="Title", OtherKey="ID", IsForeignKey=true)]
		public UsersTitle UsersTitle
		{
			get
			{
				return this._UsersTitle.Entity;
			}
			set
			{
				UsersTitle previousValue = this._UsersTitle.Entity;
				if (((previousValue != value) 
							|| (this._UsersTitle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTitle.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UsersTitle.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Title = value.ID;
					}
					else
					{
						this._Title = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTitle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProjectsUsers(ProjectsUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Tasks_Assigned_Users(Tasks_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks_Assigned_Users(Tasks_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserStories1(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserStories1(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserStory_Assigned_Users(UserStory_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserStory_Assigned_Users(UserStory_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersNFRs")]
	public partial class UsersNFR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NFR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNFRChanging(string value);
    partial void OnNFRChanged();
    #endregion
		
		public UsersNFR()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NFR
		{
			get
			{
				return this._NFR;
			}
			set
			{
				if ((this._NFR != value))
				{
					this.OnNFRChanging(value);
					this.SendPropertyChanging();
					this._NFR = value;
					this.SendPropertyChanged("NFR");
					this.OnNFRChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersTitles")]
	public partial class UsersTitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public UsersTitle()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTitle_User", Storage="_Users", ThisKey="ID", OtherKey="Title")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UsersTitle = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UsersTitle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStories")]
	public partial class UserStory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private System.Nullable<int> _SprintID;
		
		private System.Nullable<int> _EpicID;
		
		private System.Nullable<int> _ModuleID;
		
		private int _StatusID;
		
		private System.Nullable<int> _UsType;
		
		private System.Nullable<int> _RequirementType;
		
		private System.Nullable<int> _RelatedTo;
		
		private System.Nullable<int> _UsPriority;
		
		private string _AttachmentsUrl;
		
		private string _FRC_CustomUserStory;
		
		private string _FRS_Title;
		
		private string _FRS_AsA;
		
		private string _FRS_SoThat;
		
		private string _FRS_IWish;
		
		private string _FRS_AcceptanceCriteria;
		
		private System.Nullable<int> _NFR_PosOrNeg;
		
		private System.Nullable<int> _NFR_NFRID;
		
		private string _NFR_Description;
		
		private System.DateTime _CreationDate;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Nullable<int> _UpdatedBy;
		
		private string _NFR_For;
		
		private string _NFR_IWant;
		
		private string _NFR_ToBe;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserStory_Assigned_User> _UserStory_Assigned_Users;
		
		private EntitySet<UserStory_Related_Story> _UserStory_Related_Stories;
		
		private EntitySet<UserStory_Related_Story> _UserStory_Related_Stories1;
		
		private EntityRef<User> _User;
		
		private EntityRef<Module> _Module;
		
		private EntityRef<ProjectsNFR> _ProjectsNFR;
		
		private EntityRef<US_Positivity> _US_Positivity;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<US_Relation> _US_Relation;
		
		private EntityRef<US_Requirement_Type> _US_Requirement_Type;
		
		private EntityRef<Sprint> _Sprint;
		
		private EntityRef<ComponentsStatus> _ComponentsStatus;
		
		private EntityRef<User> _User1;
		
		private EntityRef<US_Priority> _US_Priority;
		
		private EntityRef<US_Type> _US_Type;
		
		private EntityRef<Epic> _Epic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnSprintIDChanging(System.Nullable<int> value);
    partial void OnSprintIDChanged();
    partial void OnEpicIDChanging(System.Nullable<int> value);
    partial void OnEpicIDChanged();
    partial void OnModuleIDChanging(System.Nullable<int> value);
    partial void OnModuleIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnUsTypeChanging(System.Nullable<int> value);
    partial void OnUsTypeChanged();
    partial void OnRequirementTypeChanging(System.Nullable<int> value);
    partial void OnRequirementTypeChanged();
    partial void OnRelatedToChanging(System.Nullable<int> value);
    partial void OnRelatedToChanged();
    partial void OnUsPriorityChanging(System.Nullable<int> value);
    partial void OnUsPriorityChanged();
    partial void OnAttachmentsUrlChanging(string value);
    partial void OnAttachmentsUrlChanged();
    partial void OnFRC_CustomUserStoryChanging(string value);
    partial void OnFRC_CustomUserStoryChanged();
    partial void OnFRS_TitleChanging(string value);
    partial void OnFRS_TitleChanged();
    partial void OnFRS_AsAChanging(string value);
    partial void OnFRS_AsAChanged();
    partial void OnFRS_SoThatChanging(string value);
    partial void OnFRS_SoThatChanged();
    partial void OnFRS_IWishChanging(string value);
    partial void OnFRS_IWishChanged();
    partial void OnFRS_AcceptanceCriteriaChanging(string value);
    partial void OnFRS_AcceptanceCriteriaChanged();
    partial void OnNFR_PosOrNegChanging(System.Nullable<int> value);
    partial void OnNFR_PosOrNegChanged();
    partial void OnNFR_NFRIDChanging(System.Nullable<int> value);
    partial void OnNFR_NFRIDChanged();
    partial void OnNFR_DescriptionChanging(string value);
    partial void OnNFR_DescriptionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnNFR_ForChanging(string value);
    partial void OnNFR_ForChanged();
    partial void OnNFR_IWantChanging(string value);
    partial void OnNFR_IWantChanged();
    partial void OnNFR_ToBeChanging(string value);
    partial void OnNFR_ToBeChanged();
    #endregion
		
		public UserStory()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserStory_Assigned_Users = new EntitySet<UserStory_Assigned_User>(new Action<UserStory_Assigned_User>(this.attach_UserStory_Assigned_Users), new Action<UserStory_Assigned_User>(this.detach_UserStory_Assigned_Users));
			this._UserStory_Related_Stories = new EntitySet<UserStory_Related_Story>(new Action<UserStory_Related_Story>(this.attach_UserStory_Related_Stories), new Action<UserStory_Related_Story>(this.detach_UserStory_Related_Stories));
			this._UserStory_Related_Stories1 = new EntitySet<UserStory_Related_Story>(new Action<UserStory_Related_Story>(this.attach_UserStory_Related_Stories1), new Action<UserStory_Related_Story>(this.detach_UserStory_Related_Stories1));
			this._User = default(EntityRef<User>);
			this._Module = default(EntityRef<Module>);
			this._ProjectsNFR = default(EntityRef<ProjectsNFR>);
			this._US_Positivity = default(EntityRef<US_Positivity>);
			this._Project = default(EntityRef<Project>);
			this._US_Relation = default(EntityRef<US_Relation>);
			this._US_Requirement_Type = default(EntityRef<US_Requirement_Type>);
			this._Sprint = default(EntityRef<Sprint>);
			this._ComponentsStatus = default(EntityRef<ComponentsStatus>);
			this._User1 = default(EntityRef<User>);
			this._US_Priority = default(EntityRef<US_Priority>);
			this._US_Type = default(EntityRef<US_Type>);
			this._Epic = default(EntityRef<Epic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", DbType="Int")]
		public System.Nullable<int> SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EpicID", DbType="Int")]
		public System.Nullable<int> EpicID
		{
			get
			{
				return this._EpicID;
			}
			set
			{
				if ((this._EpicID != value))
				{
					if (this._Epic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEpicIDChanging(value);
					this.SendPropertyChanging();
					this._EpicID = value;
					this.SendPropertyChanged("EpicID");
					this.OnEpicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleID", DbType="Int")]
		public System.Nullable<int> ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._ComponentsStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsType", DbType="Int")]
		public System.Nullable<int> UsType
		{
			get
			{
				return this._UsType;
			}
			set
			{
				if ((this._UsType != value))
				{
					if (this._US_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsTypeChanging(value);
					this.SendPropertyChanging();
					this._UsType = value;
					this.SendPropertyChanged("UsType");
					this.OnUsTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequirementType", DbType="Int")]
		public System.Nullable<int> RequirementType
		{
			get
			{
				return this._RequirementType;
			}
			set
			{
				if ((this._RequirementType != value))
				{
					if (this._US_Requirement_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementTypeChanging(value);
					this.SendPropertyChanging();
					this._RequirementType = value;
					this.SendPropertyChanged("RequirementType");
					this.OnRequirementTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedTo", DbType="Int")]
		public System.Nullable<int> RelatedTo
		{
			get
			{
				return this._RelatedTo;
			}
			set
			{
				if ((this._RelatedTo != value))
				{
					if (this._US_Relation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedToChanging(value);
					this.SendPropertyChanging();
					this._RelatedTo = value;
					this.SendPropertyChanged("RelatedTo");
					this.OnRelatedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsPriority", DbType="Int")]
		public System.Nullable<int> UsPriority
		{
			get
			{
				return this._UsPriority;
			}
			set
			{
				if ((this._UsPriority != value))
				{
					if (this._US_Priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsPriorityChanging(value);
					this.SendPropertyChanging();
					this._UsPriority = value;
					this.SendPropertyChanged("UsPriority");
					this.OnUsPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentsUrl", DbType="NVarChar(MAX)")]
		public string AttachmentsUrl
		{
			get
			{
				return this._AttachmentsUrl;
			}
			set
			{
				if ((this._AttachmentsUrl != value))
				{
					this.OnAttachmentsUrlChanging(value);
					this.SendPropertyChanging();
					this._AttachmentsUrl = value;
					this.SendPropertyChanged("AttachmentsUrl");
					this.OnAttachmentsUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRC_CustomUserStory", DbType="NVarChar(MAX)")]
		public string FRC_CustomUserStory
		{
			get
			{
				return this._FRC_CustomUserStory;
			}
			set
			{
				if ((this._FRC_CustomUserStory != value))
				{
					this.OnFRC_CustomUserStoryChanging(value);
					this.SendPropertyChanging();
					this._FRC_CustomUserStory = value;
					this.SendPropertyChanged("FRC_CustomUserStory");
					this.OnFRC_CustomUserStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRS_Title", DbType="NVarChar(MAX)")]
		public string FRS_Title
		{
			get
			{
				return this._FRS_Title;
			}
			set
			{
				if ((this._FRS_Title != value))
				{
					this.OnFRS_TitleChanging(value);
					this.SendPropertyChanging();
					this._FRS_Title = value;
					this.SendPropertyChanged("FRS_Title");
					this.OnFRS_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRS_AsA", DbType="NVarChar(MAX)")]
		public string FRS_AsA
		{
			get
			{
				return this._FRS_AsA;
			}
			set
			{
				if ((this._FRS_AsA != value))
				{
					this.OnFRS_AsAChanging(value);
					this.SendPropertyChanging();
					this._FRS_AsA = value;
					this.SendPropertyChanged("FRS_AsA");
					this.OnFRS_AsAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRS_SoThat", DbType="NVarChar(MAX)")]
		public string FRS_SoThat
		{
			get
			{
				return this._FRS_SoThat;
			}
			set
			{
				if ((this._FRS_SoThat != value))
				{
					this.OnFRS_SoThatChanging(value);
					this.SendPropertyChanging();
					this._FRS_SoThat = value;
					this.SendPropertyChanged("FRS_SoThat");
					this.OnFRS_SoThatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRS_IWish", DbType="NVarChar(MAX)")]
		public string FRS_IWish
		{
			get
			{
				return this._FRS_IWish;
			}
			set
			{
				if ((this._FRS_IWish != value))
				{
					this.OnFRS_IWishChanging(value);
					this.SendPropertyChanging();
					this._FRS_IWish = value;
					this.SendPropertyChanged("FRS_IWish");
					this.OnFRS_IWishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FRS_AcceptanceCriteria", DbType="NVarChar(MAX)")]
		public string FRS_AcceptanceCriteria
		{
			get
			{
				return this._FRS_AcceptanceCriteria;
			}
			set
			{
				if ((this._FRS_AcceptanceCriteria != value))
				{
					this.OnFRS_AcceptanceCriteriaChanging(value);
					this.SendPropertyChanging();
					this._FRS_AcceptanceCriteria = value;
					this.SendPropertyChanged("FRS_AcceptanceCriteria");
					this.OnFRS_AcceptanceCriteriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_PosOrNeg", DbType="Int")]
		public System.Nullable<int> NFR_PosOrNeg
		{
			get
			{
				return this._NFR_PosOrNeg;
			}
			set
			{
				if ((this._NFR_PosOrNeg != value))
				{
					if (this._US_Positivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNFR_PosOrNegChanging(value);
					this.SendPropertyChanging();
					this._NFR_PosOrNeg = value;
					this.SendPropertyChanged("NFR_PosOrNeg");
					this.OnNFR_PosOrNegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_NFRID", DbType="Int")]
		public System.Nullable<int> NFR_NFRID
		{
			get
			{
				return this._NFR_NFRID;
			}
			set
			{
				if ((this._NFR_NFRID != value))
				{
					if (this._ProjectsNFR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNFR_NFRIDChanging(value);
					this.SendPropertyChanging();
					this._NFR_NFRID = value;
					this.SendPropertyChanged("NFR_NFRID");
					this.OnNFR_NFRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_Description", DbType="NVarChar(MAX)")]
		public string NFR_Description
		{
			get
			{
				return this._NFR_Description;
			}
			set
			{
				if ((this._NFR_Description != value))
				{
					this.OnNFR_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._NFR_Description = value;
					this.SendPropertyChanged("NFR_Description");
					this.OnNFR_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="Date")]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_For", DbType="NVarChar(MAX)")]
		public string NFR_For
		{
			get
			{
				return this._NFR_For;
			}
			set
			{
				if ((this._NFR_For != value))
				{
					this.OnNFR_ForChanging(value);
					this.SendPropertyChanging();
					this._NFR_For = value;
					this.SendPropertyChanged("NFR_For");
					this.OnNFR_ForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_IWant", DbType="NVarChar(MAX)")]
		public string NFR_IWant
		{
			get
			{
				return this._NFR_IWant;
			}
			set
			{
				if ((this._NFR_IWant != value))
				{
					this.OnNFR_IWantChanging(value);
					this.SendPropertyChanging();
					this._NFR_IWant = value;
					this.SendPropertyChanged("NFR_IWant");
					this.OnNFR_IWantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFR_ToBe", DbType="NVarChar(MAX)")]
		public string NFR_ToBe
		{
			get
			{
				return this._NFR_ToBe;
			}
			set
			{
				if ((this._NFR_ToBe != value))
				{
					this.OnNFR_ToBeChanging(value);
					this.SendPropertyChanging();
					this._NFR_ToBe = value;
					this.SendPropertyChanged("NFR_ToBe");
					this.OnNFR_ToBeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_Task", Storage="_Tasks", ThisKey="ID", OtherKey="AssignedUserStory")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Assigned_User", Storage="_UserStory_Assigned_Users", ThisKey="ID", OtherKey="UserStory")]
		public EntitySet<UserStory_Assigned_User> UserStory_Assigned_Users
		{
			get
			{
				return this._UserStory_Assigned_Users;
			}
			set
			{
				this._UserStory_Assigned_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Related_Story", Storage="_UserStory_Related_Stories", ThisKey="ID", OtherKey="RelatedToStory")]
		public EntitySet<UserStory_Related_Story> UserStory_Related_Stories
		{
			get
			{
				return this._UserStory_Related_Stories;
			}
			set
			{
				this._UserStory_Related_Stories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Related_Story1", Storage="_UserStory_Related_Stories1", ThisKey="ID", OtherKey="UserStory")]
		public EntitySet<UserStory_Related_Story> UserStory_Related_Stories1
		{
			get
			{
				return this._UserStory_Related_Stories1;
			}
			set
			{
				this._UserStory_Related_Stories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_UserStory", Storage="_Module", ThisKey="ModuleID", OtherKey="ID", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._ModuleID = value.ID;
					}
					else
					{
						this._ModuleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectsNFR_UserStory", Storage="_ProjectsNFR", ThisKey="NFR_NFRID", OtherKey="ID", IsForeignKey=true)]
		public ProjectsNFR ProjectsNFR
		{
			get
			{
				return this._ProjectsNFR.Entity;
			}
			set
			{
				ProjectsNFR previousValue = this._ProjectsNFR.Entity;
				if (((previousValue != value) 
							|| (this._ProjectsNFR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectsNFR.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._ProjectsNFR.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._NFR_NFRID = value.ID;
					}
					else
					{
						this._NFR_NFRID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectsNFR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Positivity_UserStory", Storage="_US_Positivity", ThisKey="NFR_PosOrNeg", OtherKey="ID", IsForeignKey=true)]
		public US_Positivity US_Positivity
		{
			get
			{
				return this._US_Positivity.Entity;
			}
			set
			{
				US_Positivity previousValue = this._US_Positivity.Entity;
				if (((previousValue != value) 
							|| (this._US_Positivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Positivity.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._US_Positivity.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._NFR_PosOrNeg = value.ID;
					}
					else
					{
						this._NFR_PosOrNeg = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Positivity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserStory", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Relation_UserStory", Storage="_US_Relation", ThisKey="RelatedTo", OtherKey="ID", IsForeignKey=true)]
		public US_Relation US_Relation
		{
			get
			{
				return this._US_Relation.Entity;
			}
			set
			{
				US_Relation previousValue = this._US_Relation.Entity;
				if (((previousValue != value) 
							|| (this._US_Relation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Relation.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._US_Relation.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._RelatedTo = value.ID;
					}
					else
					{
						this._RelatedTo = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Relation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Requirement_Type_UserStory", Storage="_US_Requirement_Type", ThisKey="RequirementType", OtherKey="ID", IsForeignKey=true)]
		public US_Requirement_Type US_Requirement_Type
		{
			get
			{
				return this._US_Requirement_Type.Entity;
			}
			set
			{
				US_Requirement_Type previousValue = this._US_Requirement_Type.Entity;
				if (((previousValue != value) 
							|| (this._US_Requirement_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Requirement_Type.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._US_Requirement_Type.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._RequirementType = value.ID;
					}
					else
					{
						this._RequirementType = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Requirement_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_UserStory", Storage="_Sprint", ThisKey="SprintID", OtherKey="ID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._SprintID = value.ID;
					}
					else
					{
						this._SprintID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentsStatus_UserStory", Storage="_ComponentsStatus", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
		public ComponentsStatus ComponentsStatus
		{
			get
			{
				return this._ComponentsStatus.Entity;
			}
			set
			{
				ComponentsStatus previousValue = this._ComponentsStatus.Entity;
				if (((previousValue != value) 
							|| (this._ComponentsStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentsStatus.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._ComponentsStatus.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._StatusID = value.ID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("ComponentsStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory1", Storage="_User1", ThisKey="UpdatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserStories1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserStories1.Add(this);
						this._UpdatedBy = value.ID;
					}
					else
					{
						this._UpdatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Priority_UserStory", Storage="_US_Priority", ThisKey="UsPriority", OtherKey="ID", IsForeignKey=true)]
		public US_Priority US_Priority
		{
			get
			{
				return this._US_Priority.Entity;
			}
			set
			{
				US_Priority previousValue = this._US_Priority.Entity;
				if (((previousValue != value) 
							|| (this._US_Priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Priority.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._US_Priority.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._UsPriority = value.ID;
					}
					else
					{
						this._UsPriority = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Priority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="US_Type_UserStory", Storage="_US_Type", ThisKey="UsType", OtherKey="ID", IsForeignKey=true)]
		public US_Type US_Type
		{
			get
			{
				return this._US_Type.Entity;
			}
			set
			{
				US_Type previousValue = this._US_Type.Entity;
				if (((previousValue != value) 
							|| (this._US_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._US_Type.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._US_Type.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._UsType = value.ID;
					}
					else
					{
						this._UsType = default(Nullable<int>);
					}
					this.SendPropertyChanged("US_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Epic_UserStory", Storage="_Epic", ThisKey="EpicID", OtherKey="ID", IsForeignKey=true)]
		public Epic Epic
		{
			get
			{
				return this._Epic.Entity;
			}
			set
			{
				Epic previousValue = this._Epic.Entity;
				if (((previousValue != value) 
							|| (this._Epic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Epic.Entity = null;
						previousValue.UserStories.Remove(this);
					}
					this._Epic.Entity = value;
					if ((value != null))
					{
						value.UserStories.Add(this);
						this._EpicID = value.ID;
					}
					else
					{
						this._EpicID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Epic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.UserStory = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.UserStory = null;
		}
		
		private void attach_UserStory_Assigned_Users(UserStory_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.UserStory1 = this;
		}
		
		private void detach_UserStory_Assigned_Users(UserStory_Assigned_User entity)
		{
			this.SendPropertyChanging();
			entity.UserStory1 = null;
		}
		
		private void attach_UserStory_Related_Stories(UserStory_Related_Story entity)
		{
			this.SendPropertyChanging();
			entity.UserStory1 = this;
		}
		
		private void detach_UserStory_Related_Stories(UserStory_Related_Story entity)
		{
			this.SendPropertyChanging();
			entity.UserStory1 = null;
		}
		
		private void attach_UserStory_Related_Stories1(UserStory_Related_Story entity)
		{
			this.SendPropertyChanging();
			entity.UserStory2 = this;
		}
		
		private void detach_UserStory_Related_Stories1(UserStory_Related_Story entity)
		{
			this.SendPropertyChanging();
			entity.UserStory2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStory_Assigned_Users")]
	public partial class UserStory_Assigned_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserStory;
		
		private System.Nullable<int> _AssignedUser;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserStory> _UserStory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserStoryChanging(int value);
    partial void OnUserStoryChanged();
    partial void OnAssignedUserChanging(System.Nullable<int> value);
    partial void OnAssignedUserChanged();
    #endregion
		
		public UserStory_Assigned_User()
		{
			this._User = default(EntityRef<User>);
			this._UserStory1 = default(EntityRef<UserStory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStory", DbType="Int NOT NULL")]
		public int UserStory
		{
			get
			{
				return this._UserStory;
			}
			set
			{
				if ((this._UserStory != value))
				{
					if (this._UserStory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserStoryChanging(value);
					this.SendPropertyChanging();
					this._UserStory = value;
					this.SendPropertyChanged("UserStory");
					this.OnUserStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedUser", DbType="Int")]
		public System.Nullable<int> AssignedUser
		{
			get
			{
				return this._AssignedUser;
			}
			set
			{
				if ((this._AssignedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedUserChanging(value);
					this.SendPropertyChanging();
					this._AssignedUser = value;
					this.SendPropertyChanged("AssignedUser");
					this.OnAssignedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStory_Assigned_User", Storage="_User", ThisKey="AssignedUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserStory_Assigned_Users.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserStory_Assigned_Users.Add(this);
						this._AssignedUser = value.ID;
					}
					else
					{
						this._AssignedUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Assigned_User", Storage="_UserStory1", ThisKey="UserStory", OtherKey="ID", IsForeignKey=true)]
		public UserStory UserStory1
		{
			get
			{
				return this._UserStory1.Entity;
			}
			set
			{
				UserStory previousValue = this._UserStory1.Entity;
				if (((previousValue != value) 
							|| (this._UserStory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStory1.Entity = null;
						previousValue.UserStory_Assigned_Users.Remove(this);
					}
					this._UserStory1.Entity = value;
					if ((value != null))
					{
						value.UserStory_Assigned_Users.Add(this);
						this._UserStory = value.ID;
					}
					else
					{
						this._UserStory = default(int);
					}
					this.SendPropertyChanged("UserStory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStory_Related_Stories")]
	public partial class UserStory_Related_Story : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserStory;
		
		private System.Nullable<int> _RelatedToStory;
		
		private EntityRef<UserStory> _UserStory1;
		
		private EntityRef<UserStory> _UserStory2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserStoryChanging(int value);
    partial void OnUserStoryChanged();
    partial void OnRelatedToStoryChanging(System.Nullable<int> value);
    partial void OnRelatedToStoryChanged();
    #endregion
		
		public UserStory_Related_Story()
		{
			this._UserStory1 = default(EntityRef<UserStory>);
			this._UserStory2 = default(EntityRef<UserStory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStory", DbType="Int NOT NULL")]
		public int UserStory
		{
			get
			{
				return this._UserStory;
			}
			set
			{
				if ((this._UserStory != value))
				{
					if (this._UserStory2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserStoryChanging(value);
					this.SendPropertyChanging();
					this._UserStory = value;
					this.SendPropertyChanged("UserStory");
					this.OnUserStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedToStory", DbType="Int")]
		public System.Nullable<int> RelatedToStory
		{
			get
			{
				return this._RelatedToStory;
			}
			set
			{
				if ((this._RelatedToStory != value))
				{
					if (this._UserStory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedToStoryChanging(value);
					this.SendPropertyChanging();
					this._RelatedToStory = value;
					this.SendPropertyChanged("RelatedToStory");
					this.OnRelatedToStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Related_Story", Storage="_UserStory1", ThisKey="RelatedToStory", OtherKey="ID", IsForeignKey=true)]
		public UserStory UserStory1
		{
			get
			{
				return this._UserStory1.Entity;
			}
			set
			{
				UserStory previousValue = this._UserStory1.Entity;
				if (((previousValue != value) 
							|| (this._UserStory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStory1.Entity = null;
						previousValue.UserStory_Related_Stories.Remove(this);
					}
					this._UserStory1.Entity = value;
					if ((value != null))
					{
						value.UserStory_Related_Stories.Add(this);
						this._RelatedToStory = value.ID;
					}
					else
					{
						this._RelatedToStory = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserStory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStory_UserStory_Related_Story1", Storage="_UserStory2", ThisKey="UserStory", OtherKey="ID", IsForeignKey=true)]
		public UserStory UserStory2
		{
			get
			{
				return this._UserStory2.Entity;
			}
			set
			{
				UserStory previousValue = this._UserStory2.Entity;
				if (((previousValue != value) 
							|| (this._UserStory2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStory2.Entity = null;
						previousValue.UserStory_Related_Stories1.Remove(this);
					}
					this._UserStory2.Entity = value;
					if ((value != null))
					{
						value.UserStory_Related_Stories1.Add(this);
						this._UserStory = value.ID;
					}
					else
					{
						this._UserStory = default(int);
					}
					this.SendPropertyChanged("UserStory2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NFR_Rec_AppType")]
	public partial class NFR_Rec_AppType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AppType;
		
		private string _Reccomended_NFRs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAppTypeChanging(string value);
    partial void OnAppTypeChanged();
    partial void OnReccomended_NFRsChanging(string value);
    partial void OnReccomended_NFRsChanged();
    #endregion
		
		public NFR_Rec_AppType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AppType
		{
			get
			{
				return this._AppType;
			}
			set
			{
				if ((this._AppType != value))
				{
					this.OnAppTypeChanging(value);
					this.SendPropertyChanging();
					this._AppType = value;
					this.SendPropertyChanged("AppType");
					this.OnAppTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reccomended_NFRs", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Reccomended_NFRs
		{
			get
			{
				return this._Reccomended_NFRs;
			}
			set
			{
				if ((this._Reccomended_NFRs != value))
				{
					this.OnReccomended_NFRsChanging(value);
					this.SendPropertyChanging();
					this._Reccomended_NFRs = value;
					this.SendPropertyChanged("Reccomended_NFRs");
					this.OnReccomended_NFRsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NFR_Rec_Domain")]
	public partial class NFR_Rec_Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Domain;
		
		private string _Reccomended_NFRs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnReccomended_NFRsChanging(string value);
    partial void OnReccomended_NFRsChanged();
    #endregion
		
		public NFR_Rec_Domain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reccomended_NFRs", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Reccomended_NFRs
		{
			get
			{
				return this._Reccomended_NFRs;
			}
			set
			{
				if ((this._Reccomended_NFRs != value))
				{
					this.OnReccomended_NFRsChanging(value);
					this.SendPropertyChanging();
					this._Reccomended_NFRs = value;
					this.SendPropertyChanged("Reccomended_NFRs");
					this.OnReccomended_NFRsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Epics")]
	public partial class Epic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _Name;
		
		private System.Nullable<int> _Module;
		
		private EntitySet<UserStory> _UserStories;
		
		private EntityRef<Module> _Module1;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModuleChanging(System.Nullable<int> value);
    partial void OnModuleChanged();
    #endregion
		
		public Epic()
		{
			this._UserStories = new EntitySet<UserStory>(new Action<UserStory>(this.attach_UserStories), new Action<UserStory>(this.detach_UserStories));
			this._Module1 = default(EntityRef<Module>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Module", DbType="Int")]
		public System.Nullable<int> Module
		{
			get
			{
				return this._Module;
			}
			set
			{
				if ((this._Module != value))
				{
					if (this._Module1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleChanging(value);
					this.SendPropertyChanging();
					this._Module = value;
					this.SendPropertyChanged("Module");
					this.OnModuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Epic_UserStory", Storage="_UserStories", ThisKey="ID", OtherKey="EpicID")]
		public EntitySet<UserStory> UserStories
		{
			get
			{
				return this._UserStories;
			}
			set
			{
				this._UserStories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Epic", Storage="_Module1", ThisKey="Module", OtherKey="ID", IsForeignKey=true)]
		public Module Module1
		{
			get
			{
				return this._Module1.Entity;
			}
			set
			{
				Module previousValue = this._Module1.Entity;
				if (((previousValue != value) 
							|| (this._Module1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module1.Entity = null;
						previousValue.Epics.Remove(this);
					}
					this._Module1.Entity = value;
					if ((value != null))
					{
						value.Epics.Add(this);
						this._Module = value.ID;
					}
					else
					{
						this._Module = default(Nullable<int>);
					}
					this.SendPropertyChanged("Module1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Epic", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Epics.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Epics.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Epic = this;
		}
		
		private void detach_UserStories(UserStory entity)
		{
			this.SendPropertyChanging();
			entity.Epic = null;
		}
	}
}
#pragma warning restore 1591
